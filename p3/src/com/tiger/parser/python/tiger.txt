program → let declseg in stmts end (1)
declseg → typedecls vardecls funcdecls (2)
typedecls → ϵ (3)
typedecls → typedecl typedecls (4)
typedecl → type id := type ; (5)
type → boolean (6)
type → int (7)
type → float (8)
type → unit (9)
type → id (10)
type → array [ intlit ] of type (11)
vardecls → ϵ (12)
vardecls → vardecl vardecls (13)
vardecl → var ids : type optinit ; (14)
ids → id (15)
ids → id , ids (16)
optinit → ϵ (17)
optinit → := const (18)
funcdecls → ϵ (19)
funcdecls → funcdecl funcdecls (20)
funcdecl → func id ( params ) : type begin stmts end ; (21)
params → ϵ (22)
params → neparams (23)
neparams → param (24)
neparams → param , neparams (25)
param → id : type (26)
stmts → fullstmt (27)
stmts → fullstmt stmts (28)
fullstmt → stmt ; (29)
stmt → lvalue := expr (30)
stmt → if expr then stmts endif (31)
stmt → if expr then stmts else stmts endif (32)
stmt → while expr do stmts enddo (33)
stmt → for id := expr to expr do stmts enddo (34)
stmt → break (35)
stmt → return expr (36)
lvalue → id optoffset (37)
optoffset → ϵ (38)
optoffset → [ expr ] (39)
exprs → ϵ (40)
exprs → neexprs (41)
neexprs → expr (42)
neexprs → expr , neexprs (43)
expr → clause (44)
expr → expr | clause (45)
clause → pred (46)
clause → clause & pred (47)
pred → aexpr (48)
pred → aexpr cmp aexpr (49)
cmp → = (50)
cmp → <> (51)
cmp → <= (52)
cmp → >= (53)
cmp → < (54)
cmp → > (55)
aexpr → term (56)
aexpr → aexpr linop term (57)
linop → + (58)
linop → - (59)
term → factor (60)
term → term nonlinop factor (61)
nonlinop → * (62)
nonlinop → / (63)
factor → const (64)
factor → id (65)
factor → id [ expr ] (66)
factor → id ( exprs ) (67)
factor → ( expr ) (68)
const → true (69)
const → false (70)
const → _ (71)
const → intlit (72)
const → floatlit (73)